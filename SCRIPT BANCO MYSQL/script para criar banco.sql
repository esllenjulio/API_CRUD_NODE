-- MySQL Script generated by MySQL Workbench
-- sex 21 set 2018 23:44:19 -03
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema db_teste_api
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema db_teste_api
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `db_teste_api` DEFAULT CHARACTER SET utf8 ;
USE `db_teste_api` ;

-- -----------------------------------------------------
-- Table `db_teste_api`.`tb_pessoa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_teste_api`.`tb_pessoa` (
  `idPessoa` INT NOT NULL AUTO_INCREMENT,
  `nome` VARCHAR(50) NULL,
  `cpf` VARCHAR(20) NULL,
  `dataNascimento` DATE NULL,
  PRIMARY KEY (`idPessoa`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_teste_api`.`tb_contas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_teste_api`.`tb_contas` (
  `idConta` INT NOT NULL AUTO_INCREMENT,
  `idPessoa` INT NOT NULL,
  `saldo` DECIMAL NULL,
  `limiteSaqueDiario` DECIMAL NULL,
  `flagAtivo` TINYINT(1) NULL,
  `tipoConta` INT NULL,
  `dataCriacao` DATE NULL,
  PRIMARY KEY (`idConta`, `idPessoa`),
  INDEX `fk_tb_contas_tb_pessoa_idx` (`idPessoa` ASC),
  CONSTRAINT `fk_tb_contas_tb_pessoa`
    FOREIGN KEY (`idPessoa`)
    REFERENCES `db_teste_api`.`tb_pessoa` (`idPessoa`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_teste_api`.`tb_tipoTransacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_teste_api`.`tb_tipoTransacoes` (
  `idTipo` INT NOT NULL AUTO_INCREMENT,
  `tipoTransacao` VARCHAR(45) NULL,
  PRIMARY KEY (`idTipo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `db_teste_api`.`tb_transacoes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `db_teste_api`.`tb_transacoes` (
  `idTransacao` INT NOT NULL AUTO_INCREMENT,
  `idConta` INT NOT NULL,
  `valor` DECIMAL NULL,
  `dataTransacao` DATETIME NULL,
  `id_tipoTransacoes` INT NOT NULL,
  PRIMARY KEY (`idTransacao`, `idConta`),
  INDEX `fk_tb_transicoes_tb_contas1_idx` (`idConta` ASC),
  INDEX `fk_tb_transacoes_tb_tipoTransacoes1_idx` (`id_tipoTransacoes` ASC),
  CONSTRAINT `fk_tb_transicoes_tb_contas1`
    FOREIGN KEY (`idConta`)
    REFERENCES `db_teste_api`.`tb_contas` (`idConta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tb_transacoes_tb_tipoTransacoes1`
    FOREIGN KEY (`id_tipoTransacoes`)
    REFERENCES `db_teste_api`.`tb_tipoTransacoes` (`idTipo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `db_teste_api` ;
-------------------------------------------------------

insert into tb_tipoTransacoes (idTipo, tipoTransacao) values (null, 'Deposito'), (null, 'Saque');


-- -----------------------------------------------------
-- procedure CRIAR_CONTA
-- -----------------------------------------------------

DELIMITER $$
USE `db_teste_api`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `CRIAR_CONTA`(
	IN nome_pessoa varchar(100),
	IN cpf_pessoa  varchar(20),
    IN data_nasc_pessoa date
    
)
BEGIN
	DECLARE ULTIMO_ID_PESSOA int;
    DECLARE ULTIMO_ID_CONTA INT;
    DECLARE VALOR_INICIAL DECIMAL DEFAULT 0;
	DECLARE MENSAGEM_ERRO VARCHAR(1000) DEFAULT 'NENHUM ERRO NA PROC';
    DECLARE EXCECAO SMALLINT  DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET EXCECAO = 1;
    
    
    
    START TRANSACTION;
    INSERT INTO tb_pessoa (idPessoa, nome, cpf, dataNascimento) 
				   VALUES (null, nome_pessoa, cpf_pessoa, data_nasc_pessoa);
      COMMIT;             
     IF EXCECAO = 1 THEN
		 SET MENSAGEM_ERRO = "ERRO AO INSERIR USUARIO";
     ELSE    
			SELECT DISTINCT LAST_INSERT_ID() INTO ULTIMO_ID_PESSOA FROM tb_pessoa; 
			IF EXCECAO = 1 THEN
				SET MENSAGEM_ERRO = "ERRO: ULTIMO ID_PESSOA INSERIDO";
			ELSE
				
                INSERT INTO tb_contas (idConta, idPessoa, saldo, limiteSaqueDiario, flagAtivo, tipoConta, dataCriacao)
					VALUES (null, ULTIMO_ID_PESSOA, VALOR_INICIAL , 100.00, true, 1, CURRENT_TIMESTAMP);
                COMMIT;    
                IF EXCECAO = 1 THEN
					SET MENSAGEM_ERRO = "ERRO: ULTIMO ID_CONTAS INSERIDO";
				ELSE 
					SELECT DISTINCT LAST_INSERT_ID() INTO ULTIMO_ID_CONTA FROM tb_contas;
					IF EXCECAO = 1 THEN	
						SET MENSAGEM_ERRO =  ULTIMO_ID_CONTA;
					ELSE 
						INSERT INTO tb_transacoes( idTransacao, idConta, valor, dataTransacao, id_tipoTransacoes )
						VALUES ( NULL,ULTIMO_ID_CONTA, 0.00, CURRENT_TIMESTAMP, 1 );
                        COMMIT;
                        IF EXCECAO = 1 THEN 
							SET MENSAGEM_ERRO ='ERRO NA TRANSACAO';
                        ELSE
							SET MENSAGEM_ERRO ='TRANSAÇAO CRIADA';
						END IF;
                    END IF;
                END IF;
            END IF;
         
         
         /* VERIFICAÇAO SE JÁ EXISTE OS CAMPOS NAS TABELAS E RETORNAR OS DADOS DO CLIENTE */
         
          IF EXCECAO = 1 THEN   
				SET MENSAGEM_ERRO = 'ERRO AO BUSCAR DADOS CRIADO';
                SELECT MENSAGEM_ERRO AS ERRO;
          ELSE 
				/* SE TUDO OCORRER BEM IRÁ DIRETO PARA CONSULTA CASO CONTRARIO IRÁ RETORNAR  A MENSGEM DE ERRO*/
				IF(MENSAGEM_ERRO = "ERRO: ULTIMO ID_PESSOA INSERIDO" 
					|| MENSAGEM_ERRO = "ERRO AO INSERIR USUARIO" 
                    || MENSAGEM_ERRO = "ERRO: ULTIMO ID_PESSOA INSERIDO"
                    || MENSAGEM_ERRO = "ERRO: ULTIMO ID_CONTAS INSERIDO"
                    || MENSAGEM_ERRO = "ERRO NA TRANSACAO") THEN
                   
					SELECT MENSAGEM_ERRO AS ERRO;
                    
                 ELSE   
                    select 
						p.nome as nome,
						p.cpf as cpf,
						c.idConta as idConta,
						c.idPessoa as idPessoa,
						CAST(c.saldo AS DECIMAL(10,2)) as saldo,
						CAST(c.limiteSaqueDiario AS DECIMAL(10,2))  as limiteSaqueDiario,
						c.flagAtivo as flagAtivo,
						c.tipoConta as tipoConta,
						c.dataCriacao as dataCriacaoConta,
						t.idTransacao as idTransacao
					 
					 from tb_pessoa p, tb_contas c, tb_transacoes t
						where p.idPessoa = c.idPessoa and 
							  c.idConta = t.idConta and 
							  p.idPessoa = ULTIMO_ID_PESSOA;
                     COMMIT;
				END IF;
             END IF;
             
        /* FIM IF PRINCIPAL */     
		END IF;    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DEPOSITO_CONTA
-- -----------------------------------------------------

DELIMITER $$
USE `db_teste_api`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `DEPOSITO_CONTA`(
 IN id_conta SMALLINT,
 IN valor DECIMAL
)
BEGIN
	DECLARE ULTIMO_ID_TRANSACAO SMALLINT DEFAULT 0;
	DECLARE SALDO_ATUAL DECIMAL DEFAULT 0;
    DECLARE BLOQUEIO boolean;
	DECLARE MENSAGEM_ERRO VARCHAR(1000) DEFAULT 'NENHUM ERRO NA PROC';
    DECLARE EXCECAO SMALLINT  DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET EXCECAO = 1;	
	
    
       START TRANSACTION;  
	SELECT flagAtivo INTO BLOQUEIO FROM tb_contas WHERE idConta = id_conta;
		IF(BLOQUEIO = FALSE) then
			SET MENSAGEM_ERRO =  'Conta bloqueada';
            SELECT MENSAGEM_ERRO;
        ELSE
				SELECT saldo into SALDO_ATUAL FROM tb_contas where idConta = id_conta;
					IF EXCECAO =1 THEN 
						SET MENSAGEM_ERRO =  'ERRO AO CONSULTAR VALOR ATUAL';
					ELSE 
						UPDATE tb_contas 
							set saldo = CAST(SALDO_ATUAL AS DECIMAL(10,2))  + CAST(valor AS DECIMAL(10,2)) 
							where idConta = id_conta;
						COMMIT;
						
						IF EXCECAO=1 THEN
							SET MENSAGEM_ERRO =  'ERRO AO ATUALIZAR O VALOR ATUAL';
						ELSE
							INSERT INTO tb_transacoes( idTransacao, idConta, valor, dataTransacao, id_tipoTransacoes )
									VALUES ( NULL, id_conta, valor, CURRENT_TIMESTAMP, 1 );
									
							   SELECT DISTINCT LAST_INSERT_ID() INTO ULTIMO_ID_TRANSACAO  FROM tb_transacoes;
							 COMMIT;       
							
						END IF;
					END IF;
					
					
				   IF EXCECAO=1 THEN
						SET MENSAGEM_ERRO =  'ERRO NADA CRIADO';
					ELSE
						SELECT 
								c.idConta as idConta,
								c.saldo as saldoAtual,
								c.limiteSaqueDiario as limiteSaqueDiario,
								c.flagAtivo as flagAtivo,
								c.tipoConta as tipoConta,
								c.dataCriacao as dataCriacao,
								t.idTransacao as idTransacao,
								t.valor as valorTransacao,
								t.dataTransacao as dataTransacao
							FROM 
								tb_contas c,
								tb_transacoes t
							where c.idConta = t.idConta
							and c.idConta =  id_conta
							and t.idTransacao = ULTIMO_ID_TRANSACAO;
					END IF;
        END IF;
        
        
	
    COMMIT;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure SAQUE_CONTA
-- -----------------------------------------------------

DELIMITER $$
USE `db_teste_api`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `SAQUE_CONTA`(
 IN id_conta SMALLINT,
 IN valor DECIMAL
)
BEGIN
	DECLARE ULTIMO_ID_TRANSACAO SMALLINT DEFAULT 0;
	DECLARE SALDO_ATUAL DECIMAL DEFAULT 0;
     DECLARE BLOQUEIO boolean;
	DECLARE MENSAGEM_ERRO VARCHAR(1000) DEFAULT 'NENHUM ERRO NA PROC';
    DECLARE EXCECAO SMALLINT  DEFAULT 0;
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION SET EXCECAO = 1;	
	
    
       START TRANSACTION;  
		
        SELECT flagAtivo INTO BLOQUEIO FROM tb_contas WHERE idConta = id_conta;
		IF(BLOQUEIO = FALSE) then
			SET MENSAGEM_ERRO =  'Conta bloqueada';
            SELECT MENSAGEM_ERRO;
        ELSE
				SELECT saldo into SALDO_ATUAL FROM tb_contas where idConta = id_conta;
				IF EXCECAO =1 THEN 
					SET MENSAGEM_ERRO =  'ERRO AO CONSULTAR VALOR ATUAL';
				ELSE 
					UPDATE tb_contas 
						set saldo = CAST(SALDO_ATUAL AS DECIMAL(10,2))  - CAST(valor AS DECIMAL(10,2)) 
						where idConta = id_conta;
							
					COMMIT;
					
					IF EXCECAO=1 THEN
						SET MENSAGEM_ERRO =  'ERRO AO ATUALIZAR O VALOR ATUAL';
					ELSE
						INSERT INTO tb_transacoes( idTransacao, idConta, valor, dataTransacao, id_tipoTransacoes )
								VALUES ( NULL, id_conta, valor, CURRENT_TIMESTAMP, 2);
								
						SELECT DISTINCT LAST_INSERT_ID() INTO ULTIMO_ID_TRANSACAO  FROM tb_transacoes;
						 COMMIT;       
						
					END IF;
				END IF;
				
				
			   IF EXCECAO=1 THEN
					SET MENSAGEM_ERRO =  'ERRO NADA CRIADO';
				ELSE
					SELECT 
							c.idConta as idConta,
							c.saldo as saldoAtual,
							c.limiteSaqueDiario as limiteSaqueDiario,
							c.flagAtivo as flagAtivo,
							c.tipoConta as tipoConta,
							c.dataCriacao as dataCriacao,
							t.idTransacao as idTransacao,
							t.valor as valorTransacao,
							t.dataTransacao as dataTransacao
						FROM 
							tb_contas c,
							tb_transacoes t
						where c.idConta = t.idConta
						and c.idConta =  id_conta
						and t.idTransacao = ULTIMO_ID_TRANSACAO;
				END IF;
        END IF;
    COMMIT;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
